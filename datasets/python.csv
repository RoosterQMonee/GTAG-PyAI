sample;discord bot
sample;exec("""\nimport discord, os\nimport discord.ext\nfrom discord.utils import get\nfrom discord.ext import commands, tasks\nfrom discord.ext.commands import has_permissions,  CheckFailure, check\n\nclient = discord.Client()\nclient = commands.Bot(command_prefix = '!')\n\n@client.event\nasync def on_ready():\n    print("Connected to Client")\n\n@client.command(pass_context=True)\nasync def message(ctx, member: discord.Member):\n    await client.say(f'Hello, {member}!')\n\nclient.run(os.getenv('TOKEN'))\n""")
sample;discord ai
sample;exec("""\nimport discord, os\nimport discord.ext\nfrom discord.utils import get\nfrom discord.ext import commands, tasks\nfrom discord.ext.commands import has_permissions,  CheckFailure, check\n\nclient = discord.Client()\nclient = commands.Bot(command_prefix = '!')\n\n@client.event\nasync def on_ready():\n    print("Connected to Client")\n\n@client.command(pass_context=True)\nasync def message(ctx, member: discord.Member):\n    await client.say(f'Hello, {member}!')\n\nclient.run(os.getenv('TOKEN'))\n""")
sample;discord.py
sample;exec("""\nimport discord, os\nimport discord.ext\nfrom discord.utils import get\nfrom discord.ext import commands, tasks\nfrom discord.ext.commands import has_permissions,  CheckFailure, check\n\nclient = discord.Client()\nclient = commands.Bot(command_prefix = '!')\n\n@client.event\nasync def on_ready():\n    print("Connected to Client")\n\n@client.command(pass_context=True)\nasync def message(ctx, member: discord.Member):\n    await client.say(f'Hello, {member}!')\n\nclient.run(os.getenv('TOKEN'))\n""")
sample;discord python
sample;exec("""\nimport discord, os\nimport discord.ext\nfrom discord.utils import get\nfrom discord.ext import commands, tasks\nfrom discord.ext.commands import has_permissions,  CheckFailure, check\n\nclient = discord.Client()\nclient = commands.Bot(command_prefix = '!')\n\n@client.event\nasync def on_ready():\n    print("Connected to Client")\n\n@client.command(pass_context=True)\nasync def message(ctx, member: discord.Member):\n    await client.say(f'Hello, {member}!')\n\nclient.run(os.getenv('TOKEN'))\n""")
sample;python discord
sample;exec("""\nimport discord, os\nimport discord.ext\nfrom discord.utils import get\nfrom discord.ext import commands, tasks\nfrom discord.ext.commands import has_permissions,  CheckFailure, check\n\nclient = discord.Client()\nclient = commands.Bot(command_prefix = '!')\n\n@client.event\nasync def on_ready():\n    print("Connected to Client")\n\n@client.command(pass_context=True)\nasync def message(ctx, member: discord.Member):\n    await client.say(f'Hello, {member}!')\n\nclient.run(os.getenv('TOKEN'))\n""")
sample;bot discord
sample;exec("""\nimport discord, os\nimport discord.ext\nfrom discord.utils import get\nfrom discord.ext import commands, tasks\nfrom discord.ext.commands import has_permissions,  CheckFailure, check\n\nclient = discord.Client()\nclient = commands.Bot(command_prefix = '!')\n\n@client.event\nasync def on_ready():\n    print("Connected to Client")\n\n@client.command(pass_context=True)\nasync def message(ctx, member: discord.Member):\n    await client.say(f'Hello, {member}!')\n\nclient.run(os.getenv('TOKEN'))\n""")
sample;counting bot
sample;exec("""\nimport json, time\nfrom os import path, system\nfrom tqdm import tqdm\nfrom threading import Thread\nfrom random import randint\n\nfilename = 'dat.json'\nlistObj = []\n\nwith open(filename) as fp: listObj = json.load(fp)\n\nnum, stime, t_all = 1000, 0.001, 0\ncorrect = [i for i in range(1,(num+1))]\nguessed = [i for i in range(num)]\n\nfor i in listObj[0]['tries']: t_all += i\ntrn_amt=int((t_all/len(listObj[0]['tries'])*5.5)*(1000/num))\ndef progbar():\n  for i in tqdm(range(trn_amt)): pass\n  print(f'Trained with epoch: {str(trn_amt)}')\n\ndef main():\n  tries = 0\n  Thread(target=progbar).start()\n  while guessed != correct:\n    for i in range(num):\n      if guessed[i] == correct[i]: continue\n      guessed[i] = randint(1,num)\n      tries += 1\n  acc = (t_all/len(listObj[0]['tries'])*5.5*(1000/num))/5.5-tries\n  print(f'output: {guessed}\\ncorrect: {correct}', f'\\nepochs: {tries}', f'\\naccuracy: {acc}')\n\n  listObj[0]['tries'].append(tries)\n\n  with open(filename, 'w') as json_file:\n    json.dump(\n      listObj, json_file, \n      indent=4, separators=(',',': ')\n    )\n\nif __name__ == '__main__':\n  main()\n""")
sample;counting ai
sample;exec("""\nimport json, time\nfrom os import path, system\nfrom tqdm import tqdm\nfrom threading import Thread\nfrom random import randint\n\nfilename = 'dat.json'\nlistObj = []\n\nwith open(filename) as fp: listObj = json.load(fp)\n\nnum, stime, t_all = 1000, 0.001, 0\ncorrect = [i for i in range(1,(num+1))]\nguessed = [i for i in range(num)]\n\nfor i in listObj[0]['tries']: t_all += i\ntrn_amt=int((t_all/len(listObj[0]['tries'])*5.5)*(1000/num))\ndef progbar():\n  for i in tqdm(range(trn_amt)): pass\n  print(f'Trained with epoch: {str(trn_amt)}')\n\ndef main():\n  tries = 0\n  Thread(target=progbar).start()\n  while guessed != correct:\n    for i in range(num):\n      if guessed[i] == correct[i]: continue\n      guessed[i] = randint(1,num)\n      tries += 1\n  acc = (t_all/len(listObj[0]['tries'])*5.5*(1000/num))/5.5-tries\n  print(f'output: {guessed}\\ncorrect: {correct}', f'\\nepochs: {tries}', f'\\naccuracy: {acc}')\n\n  listObj[0]['tries'].append(tries)\n\n  with open(filename, 'w') as json_file:\n    json.dump(\n      listObj, json_file, \n      indent=4, separators=(',',': ')\n    )\n\nif __name__ == '__main__':\n  main()\n""")
sample;learning count
sample;exec("""\nimport json, time\nfrom os import path, system\nfrom tqdm import tqdm\nfrom threading import Thread\nfrom random import randint\n\nfilename = 'dat.json'\nlistObj = []\n\nwith open(filename) as fp: listObj = json.load(fp)\n\nnum, stime, t_all = 1000, 0.001, 0\ncorrect = [i for i in range(1,(num+1))]\nguessed = [i for i in range(num)]\n\nfor i in listObj[0]['tries']: t_all += i\ntrn_amt=int((t_all/len(listObj[0]['tries'])*5.5)*(1000/num))\ndef progbar():\n  for i in tqdm(range(trn_amt)): pass\n  print(f'Trained with epoch: {str(trn_amt)}')\n\ndef main():\n  tries = 0\n  Thread(target=progbar).start()\n  while guessed != correct:\n    for i in range(num):\n      if guessed[i] == correct[i]: continue\n      guessed[i] = randint(1,num)\n      tries += 1\n  acc = (t_all/len(listObj[0]['tries'])*5.5*(1000/num))/5.5-tries\n  print(f'output: {guessed}\\ncorrect: {correct}', f'\\nepochs: {tries}', f'\\naccuracy: {acc}')\n\n  listObj[0]['tries'].append(tries)\n\n  with open(filename, 'w') as json_file:\n    json.dump(\n      listObj, json_file, \n      indent=4, separators=(',',': ')\n    )\n\nif __name__ == '__main__':\n  main()\n""")
sample;random number game
sample;exec("""\nfrom random import randint\n\nprint("\\nWelcome to the Number Guessing Game!\\n"\n      "I'm thinking of a number between 1 and 100.")\n\nanswer = randint(1, 100)\n\nEASY_LEVEL_TURNS = 10\nHARD_LEVEL_TURNS = 5\n\ndef user_choice():\n    easy_hard = input("\\nChoose a difficulty. Type 'easy' or 'hard': ").lower()\n    if easy_hard == "easy":\n        return EASY_LEVEL_TURNS\n    elif easy_hard == "hard":\n        return HARD_LEVEL_TURNS\n\ndef guess():\n    turns = user_choice()\n\n    def guess_again(turns_left):\n        if turns != 0:\n            print("Guess again...")\n        elif turns == 0:\n            print(\n                f"\\nYou've run out of guesses, you lose.\\nThe number was {answer}!\\n\\n"\n            )\n\n    while turns != 0:\n        print(f"\\nYou have {turns} attempts remaining to guess the number.")\n        guess = int(float(input("Make a guess: ")))\n        if guess < 1 or guess > 100:\n            print(f"Invalid guess!\\nIt should be between 1 and 100.")\n            turns -= 1\n        elif guess == answer:\n            print(f"\\nYou got it! The answer was {answer}!\\n\\n")\n            turns = 0\n        elif guess > answer:\n            print(f"Too HIGH!")\n            turns -= 1\n            guess_again(turns_left=turns)\n        elif guess < answer:\n            print(f"Too LOW!")\n            turns -= 1\n            guess_again(turns_left=turns)\n\nguess()\n""")
sample;guessing game
sample;exec("""\nfrom random import randint\n\nprint("\\nWelcome to the Number Guessing Game!\\n"\n      "I'm thinking of a number between 1 and 100.")\n\nanswer = randint(1, 100)\n\nEASY_LEVEL_TURNS = 10\nHARD_LEVEL_TURNS = 5\n\ndef user_choice():\n    easy_hard = input("\\nChoose a difficulty. Type 'easy' or 'hard': ").lower()\n    if easy_hard == "easy":\n        return EASY_LEVEL_TURNS\n    elif easy_hard == "hard":\n        return HARD_LEVEL_TURNS\n\ndef guess():\n    turns = user_choice()\n\n    def guess_again(turns_left):\n        if turns != 0:\n            print("Guess again...")\n        elif turns == 0:\n            print(\n                f"\\nYou've run out of guesses, you lose.\\nThe number was {answer}!\\n\\n"\n            )\n\n    while turns != 0:\n        print(f"\\nYou have {turns} attempts remaining to guess the number.")\n        guess = int(float(input("Make a guess: ")))\n        if guess < 1 or guess > 100:\n            print(f"Invalid guess!\\nIt should be between 1 and 100.")\n            turns -= 1\n        elif guess == answer:\n            print(f"\\nYou got it! The answer was {answer}!\\n\\n")\n            turns = 0\n        elif guess > answer:\n            print(f"Too HIGH!")\n            turns -= 1\n            guess_again(turns_left=turns)\n        elif guess < answer:\n            print(f"Too LOW!")\n            turns -= 1\n            guess_again(turns_left=turns)\n\nguess()\n""")
sample;random guess game
sample;exec("""\nfrom random import randint\n\nprint("\\nWelcome to the Number Guessing Game!\\n"\n      "I'm thinking of a number between 1 and 100.")\n\nanswer = randint(1, 100)\n\nEASY_LEVEL_TURNS = 10\nHARD_LEVEL_TURNS = 5\n\ndef user_choice():\n    easy_hard = input("\\nChoose a difficulty. Type 'easy' or 'hard': ").lower()\n    if easy_hard == "easy":\n        return EASY_LEVEL_TURNS\n    elif easy_hard == "hard":\n        return HARD_LEVEL_TURNS\n\ndef guess():\n    turns = user_choice()\n\n    def guess_again(turns_left):\n        if turns != 0:\n            print("Guess again...")\n        elif turns == 0:\n            print(\n                f"\\nYou've run out of guesses, you lose.\\nThe number was {answer}!\\n\\n"\n            )\n\n    while turns != 0:\n        print(f"\\nYou have {turns} attempts remaining to guess the number.")\n        guess = int(float(input("Make a guess: ")))\n        if guess < 1 or guess > 100:\n            print(f"Invalid guess!\\nIt should be between 1 and 100.")\n            turns -= 1\n        elif guess == answer:\n            print(f"\\nYou got it! The answer was {answer}!\\n\\n")\n            turns = 0\n        elif guess > answer:\n            print(f"Too HIGH!")\n            turns -= 1\n            guess_again(turns_left=turns)\n        elif guess < answer:\n            print(f"Too LOW!")\n            turns -= 1\n            guess_again(turns_left=turns)\n\nguess()\n""")
sample;random number guess game
sample;exec("""\nfrom random import randint\n\nprint("\\nWelcome to the Number Guessing Game!\\n"\n      "I'm thinking of a number between 1 and 100.")\n\nanswer = randint(1, 100)\n\nEASY_LEVEL_TURNS = 10\nHARD_LEVEL_TURNS = 5\n\ndef user_choice():\n    easy_hard = input("\\nChoose a difficulty. Type 'easy' or 'hard': ").lower()\n    if easy_hard == "easy":\n        return EASY_LEVEL_TURNS\n    elif easy_hard == "hard":\n        return HARD_LEVEL_TURNS\n\ndef guess():\n    turns = user_choice()\n\n    def guess_again(turns_left):\n        if turns != 0:\n            print("Guess again...")\n        elif turns == 0:\n            print(\n                f"\\nYou've run out of guesses, you lose.\\nThe number was {answer}!\\n\\n"\n            )\n\n    while turns != 0:\n        print(f"\\nYou have {turns} attempts remaining to guess the number.")\n        guess = int(float(input("Make a guess: ")))\n        if guess < 1 or guess > 100:\n            print(f"Invalid guess!\\nIt should be between 1 and 100.")\n            turns -= 1\n        elif guess == answer:\n            print(f"\\nYou got it! The answer was {answer}!\\n\\n")\n            turns = 0\n        elif guess > answer:\n            print(f"Too HIGH!")\n            turns -= 1\n            guess_again(turns_left=turns)\n        elif guess < answer:\n            print(f"Too LOW!")\n            turns -= 1\n            guess_again(turns_left=turns)\n\nguess()\n""")
sample;number game
sample;exec("""\nfrom random import randint\n\nprint("\\nWelcome to the Number Guessing Game!\\n"\n      "I'm thinking of a number between 1 and 100.")\n\nanswer = randint(1, 100)\n\nEASY_LEVEL_TURNS = 10\nHARD_LEVEL_TURNS = 5\n\ndef user_choice():\n    easy_hard = input("\\nChoose a difficulty. Type 'easy' or 'hard': ").lower()\n    if easy_hard == "easy":\n        return EASY_LEVEL_TURNS\n    elif easy_hard == "hard":\n        return HARD_LEVEL_TURNS\n\ndef guess():\n    turns = user_choice()\n\n    def guess_again(turns_left):\n        if turns != 0:\n            print("Guess again...")\n        elif turns == 0:\n            print(\n                f"\\nYou've run out of guesses, you lose.\\nThe number was {answer}!\\n\\n"\n            )\n\n    while turns != 0:\n        print(f"\\nYou have {turns} attempts remaining to guess the number.")\n        guess = int(float(input("Make a guess: ")))\n        if guess < 1 or guess > 100:\n            print(f"Invalid guess!\\nIt should be between 1 and 100.")\n            turns -= 1\n        elif guess == answer:\n            print(f"\\nYou got it! The answer was {answer}!\\n\\n")\n            turns = 0\n        elif guess > answer:\n            print(f"Too HIGH!")\n            turns -= 1\n            guess_again(turns_left=turns)\n        elif guess < answer:\n            print(f"Too LOW!")\n            turns -= 1\n            guess_again(turns_left=turns)\n\nguess()\n""")
sample;number guess
sample;exec("""\nfrom random import randint\n\nprint("\\nWelcome to the Number Guessing Game!\\n"\n      "I'm thinking of a number between 1 and 100.")\n\nanswer = randint(1, 100)\n\nEASY_LEVEL_TURNS = 10\nHARD_LEVEL_TURNS = 5\n\ndef user_choice():\n    easy_hard = input("\\nChoose a difficulty. Type 'easy' or 'hard': ").lower()\n    if easy_hard == "easy":\n        return EASY_LEVEL_TURNS\n    elif easy_hard == "hard":\n        return HARD_LEVEL_TURNS\n\ndef guess():\n    turns = user_choice()\n\n    def guess_again(turns_left):\n        if turns != 0:\n            print("Guess again...")\n        elif turns == 0:\n            print(\n                f"\\nYou've run out of guesses, you lose.\\nThe number was {answer}!\\n\\n"\n            )\n\n    while turns != 0:\n        print(f"\\nYou have {turns} attempts remaining to guess the number.")\n        guess = int(float(input("Make a guess: ")))\n        if guess < 1 or guess > 100:\n            print(f"Invalid guess!\\nIt should be between 1 and 100.")\n            turns -= 1\n        elif guess == answer:\n            print(f"\\nYou got it! The answer was {answer}!\\n\\n")\n            turns = 0\n        elif guess > answer:\n            print(f"Too HIGH!")\n            turns -= 1\n            guess_again(turns_left=turns)\n        elif guess < answer:\n            print(f"Too LOW!")\n            turns -= 1\n            guess_again(turns_left=turns)\n\nguess()\n""")
sample;print
sample;print("Hello, World!")
sample;write to console
sample;print("Hello, World!")
sample;print text
sample;print("Hello, World!")
sample;hangman
sample;exec("""\ndef main():\n    print("")\n    import random\n    import time\n    joe=0\n    name = input("What is your name? ")\n    if name==("Hacker"):\n        print("")\n        print("Error. please wait... We are trying to configure the problem")\n        time.sleep(2)\n        while True:\n          print("ERROR SYSTEM OVERIDE. A VIRUS HAS ENTERED THE PROGRAM. DOWNLOADING VIRUS2XE.EXE. >>>PROCESS LOADING ERR0R PROGRAM (Computer Johnathan has been granted access to your device) TRYING TO CONFIGURE. LOADING... A VIRUS HAS ENTERED YOUR COMPUTER. REPLIT.COM IS NOT A SAFE WEBSITE. A SYSTEM ERROR HAS BEEN DETECTED PLEASE RESET THE DEVICE IMMEDIATELY. TRYING TO CONFIGURE>>>")\n    print("")\n    print ("Sup " + name + ", welcome to Python hangman")\n    print ("")\n    time.sleep(1)\n    print ("Guess:")\n    print("")\n    time.sleep(0.5)\n    word=("flabbergasted","consequent","constitution","president","watch","cheese","canteloupe","confusion","cabbage","boorish","applewatch","computer","graphics","catastrophic")\n    word=random.choice(word)\n    guesses = ''\n    turns = round((len(word))*1.7)\n    failed = 0\n    number_of_tries=0           \n    while turns > 0:\n      failed=0\n      if joe ==(len(word)):\n        for char in word:\n          if char in guesses:\n            print (char)\n        print("You Won!!!")\n        quit()\n      else:           \n        for char in word:\n            if char in guesses:\n                print (char)\n            else:\n                print ("_")\n                failed += 1\n        if failed==0:\n          print("")\n          print("You Won!!!")\n          print("")\n          print("It took you "+ str(number_of_tries)+" tries to get this " + str(len(word)) + " letter word")\n          break\n        print("")\n        guess = input("guess a character: ")\n        guesses+=guess\n        number_of_tries+=1            \n        if guess not in (word):  \n            turns -= 1\n            print("")\n            print ("Wrong")\n            print("")\n            print ("You have", + turns, "more guesses") \n            print("")\n            if turns == 0:\n                print ("You Lose, you ran out of tries :(")\n""")
sample;python hangman
sample;exec("""\ndef main():\n    print("")\n    import random\n    import time\n    joe=0\n    name = input("What is your name? ")\n    if name==("Hacker"):\n        print("")\n        print("Error. please wait... We are trying to configure the problem")\n        time.sleep(2)\n        while True:\n          print("ERROR SYSTEM OVERIDE. A VIRUS HAS ENTERED THE PROGRAM. DOWNLOADING VIRUS2XE.EXE. >>>PROCESS LOADING ERR0R PROGRAM (Computer Johnathan has been granted access to your device) TRYING TO CONFIGURE. LOADING... A VIRUS HAS ENTERED YOUR COMPUTER. REPLIT.COM IS NOT A SAFE WEBSITE. A SYSTEM ERROR HAS BEEN DETECTED PLEASE RESET THE DEVICE IMMEDIATELY. TRYING TO CONFIGURE>>>")\n    print("")\n    print ("Sup " + name + ", welcome to Python hangman")\n    print ("")\n    time.sleep(1)\n    print ("Guess:")\n    print("")\n    time.sleep(0.5)\n    word=("flabbergasted","consequent","constitution","president","watch","cheese","canteloupe","confusion","cabbage","boorish","applewatch","computer","graphics","catastrophic")\n    word=random.choice(word)\n    guesses = ''\n    turns = round((len(word))*1.7)\n    failed = 0\n    number_of_tries=0           \n    while turns > 0:\n      failed=0\n      if joe ==(len(word)):\n        for char in word:\n          if char in guesses:\n            print (char)\n        print("You Won!!!")\n        quit()\n      else:           \n        for char in word:\n            if char in guesses:\n                print (char)\n            else:\n                print ("_")\n                failed += 1\n        if failed==0:\n          print("")\n          print("You Won!!!")\n          print("")\n          print("It took you "+ str(number_of_tries)+" tries to get this " + str(len(word)) + " letter word")\n          break\n        print("")\n        guess = input("guess a character: ")\n        guesses+=guess\n        number_of_tries+=1            \n        if guess not in (word):  \n            turns -= 1\n            print("")\n            print ("Wrong")\n            print("")\n            print ("You have", + turns, "more guesses") \n            print("")\n            if turns == 0:\n                print ("You Lose, you ran out of tries :(")\n""")
sample;hangman python
sample;exec("""\ndef main():\n    print("")\n    import random\n    import time\n    joe=0\n    name = input("What is your name? ")\n    if name==("Hacker"):\n        print("")\n        print("Error. please wait... We are trying to configure the problem")\n        time.sleep(2)\n        while True:\n          print("ERROR SYSTEM OVERIDE. A VIRUS HAS ENTERED THE PROGRAM. DOWNLOADING VIRUS2XE.EXE. >>>PROCESS LOADING ERR0R PROGRAM (Computer Johnathan has been granted access to your device) TRYING TO CONFIGURE. LOADING... A VIRUS HAS ENTERED YOUR COMPUTER. REPLIT.COM IS NOT A SAFE WEBSITE. A SYSTEM ERROR HAS BEEN DETECTED PLEASE RESET THE DEVICE IMMEDIATELY. TRYING TO CONFIGURE>>>")\n    print("")\n    print ("Sup " + name + ", welcome to Python hangman")\n    print ("")\n    time.sleep(1)\n    print ("Guess:")\n    print("")\n    time.sleep(0.5)\n    word=("flabbergasted","consequent","constitution","president","watch","cheese","canteloupe","confusion","cabbage","boorish","applewatch","computer","graphics","catastrophic")\n    word=random.choice(word)\n    guesses = ''\n    turns = round((len(word))*1.7)\n    failed = 0\n    number_of_tries=0           \n    while turns > 0:\n      failed=0\n      if joe ==(len(word)):\n        for char in word:\n          if char in guesses:\n            print (char)\n        print("You Won!!!")\n        quit()\n      else:           \n        for char in word:\n            if char in guesses:\n                print (char)\n            else:\n                print ("_")\n                failed += 1\n        if failed==0:\n          print("")\n          print("You Won!!!")\n          print("")\n          print("It took you "+ str(number_of_tries)+" tries to get this " + str(len(word)) + " letter word")\n          break\n        print("")\n        guess = input("guess a character: ")\n        guesses+=guess\n        number_of_tries+=1            \n        if guess not in (word):  \n            turns -= 1\n            print("")\n            print ("Wrong")\n            print("")\n            print ("You have", + turns, "more guesses") \n            print("")\n            if turns == 0:\n                print ("You Lose, you ran out of tries :(")\n""")
sample;hangman game
sample;exec("""\ndef main():\n    print("")\n    import random\n    import time\n    joe=0\n    name = input("What is your name? ")\n    if name==("Hacker"):\n        print("")\n        print("Error. please wait... We are trying to configure the problem")\n        time.sleep(2)\n        while True:\n          print("ERROR SYSTEM OVERIDE. A VIRUS HAS ENTERED THE PROGRAM. DOWNLOADING VIRUS2XE.EXE. >>>PROCESS LOADING ERR0R PROGRAM (Computer Johnathan has been granted access to your device) TRYING TO CONFIGURE. LOADING... A VIRUS HAS ENTERED YOUR COMPUTER. REPLIT.COM IS NOT A SAFE WEBSITE. A SYSTEM ERROR HAS BEEN DETECTED PLEASE RESET THE DEVICE IMMEDIATELY. TRYING TO CONFIGURE>>>")\n    print("")\n    print ("Sup " + name + ", welcome to Python hangman")\n    print ("")\n    time.sleep(1)\n    print ("Guess:")\n    print("")\n    time.sleep(0.5)\n    word=("flabbergasted","consequent","constitution","president","watch","cheese","canteloupe","confusion","cabbage","boorish","applewatch","computer","graphics","catastrophic")\n    word=random.choice(word)\n    guesses = ''\n    turns = round((len(word))*1.7)\n    failed = 0\n    number_of_tries=0           \n    while turns > 0:\n      failed=0\n      if joe ==(len(word)):\n        for char in word:\n          if char in guesses:\n            print (char)\n        print("You Won!!!")\n        quit()\n      else:           \n        for char in word:\n            if char in guesses:\n                print (char)\n            else:\n                print ("_")\n                failed += 1\n        if failed==0:\n          print("")\n          print("You Won!!!")\n          print("")\n          print("It took you "+ str(number_of_tries)+" tries to get this " + str(len(word)) + " letter word")\n          break\n        print("")\n        guess = input("guess a character: ")\n        guesses+=guess\n        number_of_tries+=1            \n        if guess not in (word):  \n            turns -= 1\n            print("")\n            print ("Wrong")\n            print("")\n            print ("You have", + turns, "more guesses") \n            print("")\n            if turns == 0:\n                print ("You Lose, you ran out of tries :(")\n""")
sample;game hangman
sample;exec("""\ndef main():\n    print("")\n    import random\n    import time\n    joe=0\n    name = input("What is your name? ")\n    if name==("Hacker"):\n        print("")\n        print("Error. please wait... We are trying to configure the problem")\n        time.sleep(2)\n        while True:\n          print("ERROR SYSTEM OVERIDE. A VIRUS HAS ENTERED THE PROGRAM. DOWNLOADING VIRUS2XE.EXE. >>>PROCESS LOADING ERR0R PROGRAM (Computer Johnathan has been granted access to your device) TRYING TO CONFIGURE. LOADING... A VIRUS HAS ENTERED YOUR COMPUTER. REPLIT.COM IS NOT A SAFE WEBSITE. A SYSTEM ERROR HAS BEEN DETECTED PLEASE RESET THE DEVICE IMMEDIATELY. TRYING TO CONFIGURE>>>")\n    print("")\n    print ("Sup " + name + ", welcome to Python hangman")\n    print ("")\n    time.sleep(1)\n    print ("Guess:")\n    print("")\n    time.sleep(0.5)\n    word=("flabbergasted","consequent","constitution","president","watch","cheese","canteloupe","confusion","cabbage","boorish","applewatch","computer","graphics","catastrophic")\n    word=random.choice(word)\n    guesses = ''\n    turns = round((len(word))*1.7)\n    failed = 0\n    number_of_tries=0           \n    while turns > 0:\n      failed=0\n      if joe ==(len(word)):\n        for char in word:\n          if char in guesses:\n            print (char)\n        print("You Won!!!")\n        quit()\n      else:           \n        for char in word:\n            if char in guesses:\n                print (char)\n            else:\n                print ("_")\n                failed += 1\n        if failed==0:\n          print("")\n          print("You Won!!!")\n          print("")\n          print("It took you "+ str(number_of_tries)+" tries to get this " + str(len(word)) + " letter word")\n          break\n        print("")\n        guess = input("guess a character: ")\n        guesses+=guess\n        number_of_tries+=1            \n        if guess not in (word):  \n            turns -= 1\n            print("")\n            print ("Wrong")\n            print("")\n            print ("You have", + turns, "more guesses") \n            print("")\n            if turns == 0:\n                print ("You Lose, you ran out of tries :(")\n""")
sample;tic tac toe
sample;exec("""\ndef main():\n    print("")\n    print("This is the numerical value for each section:")\n    print("")\n    print('1' + ' |' + ' 2 ' + '| ' + '3')\n    print('--+---+--')\n    print('4' + ' |' + ' 5 ' + '| ' + '6')\n    print('--+---+--')\n    print('7' + ' |' + ' 8 ' + '| ' + '9')\n    print("________________________")\n    theBoard = {'7': ' ' , '8': ' ' , '9': ' ' ,\n                '4': ' ' , '5': ' ' , '6': ' ' ,\n                '1': ' ' , '2': ' ' , '3': ' ' }\n    board_keys = []\n    for key in theBoard:\n        board_keys.append(key)\n    print("")\n    def printBoard(board):\n        print(board['1'] + ' |' + board['2'] + '  |' + board['3'])\n        print('--+---+--')\n        print(board['4'] + ' |' + board['5'] + '  |' + board['6'])\n        print('--+---+--')\n        print(board['7'] + ' |' + board['8'] + '  |' + board['9'])\n    def game():\n        turn = 'X'\n        count = 0\n        for i in range(10):\n            printBoard(theBoard)\n            print("")\n            print("It's " + turn + "'s turn. Move to which place?")\n            print("")\n            move = input()\n            print("")     \n            if theBoard[move] == ' ':\n                theBoard[move] = turn\n                count += 1\n            else:\n                print("That place is already filled.\\nMove to which place?")\n                continue\n            if count >= 5:\n                if theBoard['7'] == theBoard['8'] == theBoard['9'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")                \n                    break\n                elif theBoard['4'] == theBoard['5'] == theBoard['6'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['2'] == theBoard['3'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['4'] == theBoard['7'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['2'] == theBoard['5'] == theBoard['8'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['3'] == theBoard['6'] == theBoard['9'] != ' ': # \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n                elif theBoard['7'] == theBoard['5'] == theBoard['3'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['5'] == theBoard['9'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n            \n            if turn =='X':\n                turn = 'O'\n            else:\n                turn = 'X'\n        if count==9:\n          print("\\nGame Over.\\n")                \n          print("It's a Tie!!")   \n          print("")\n    game()\n    restart = input("\\nDo want to play Again(yes/no)? \\n")\n    if restart == "yes" or restart == "Yes":  \n      for key in board_keys:\n        theBoard[key] = " "\n        game()\n""")
sample;tic tac toe python
sample;exec("""\ndef main():\n    print("")\n    print("This is the numerical value for each section:")\n    print("")\n    print('1' + ' |' + ' 2 ' + '| ' + '3')\n    print('--+---+--')\n    print('4' + ' |' + ' 5 ' + '| ' + '6')\n    print('--+---+--')\n    print('7' + ' |' + ' 8 ' + '| ' + '9')\n    print("________________________")\n    theBoard = {'7': ' ' , '8': ' ' , '9': ' ' ,\n                '4': ' ' , '5': ' ' , '6': ' ' ,\n                '1': ' ' , '2': ' ' , '3': ' ' }\n    board_keys = []\n    for key in theBoard:\n        board_keys.append(key)\n    print("")\n    def printBoard(board):\n        print(board['1'] + ' |' + board['2'] + '  |' + board['3'])\n        print('--+---+--')\n        print(board['4'] + ' |' + board['5'] + '  |' + board['6'])\n        print('--+---+--')\n        print(board['7'] + ' |' + board['8'] + '  |' + board['9'])\n    def game():\n        turn = 'X'\n        count = 0\n        for i in range(10):\n            printBoard(theBoard)\n            print("")\n            print("It's " + turn + "'s turn. Move to which place?")\n            print("")\n            move = input()\n            print("")     \n            if theBoard[move] == ' ':\n                theBoard[move] = turn\n                count += 1\n            else:\n                print("That place is already filled.\\nMove to which place?")\n                continue\n            if count >= 5:\n                if theBoard['7'] == theBoard['8'] == theBoard['9'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")                \n                    break\n                elif theBoard['4'] == theBoard['5'] == theBoard['6'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['2'] == theBoard['3'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['4'] == theBoard['7'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['2'] == theBoard['5'] == theBoard['8'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['3'] == theBoard['6'] == theBoard['9'] != ' ': # \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n                elif theBoard['7'] == theBoard['5'] == theBoard['3'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['5'] == theBoard['9'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n            \n            if turn =='X':\n                turn = 'O'\n            else:\n                turn = 'X'\n        if count==9:\n          print("\\nGame Over.\\n")                \n          print("It's a Tie!!")   \n          print("")\n    game()\n    restart = input("\\nDo want to play Again(yes/no)? \\n")\n    if restart == "yes" or restart == "Yes":  \n      for key in board_keys:\n        theBoard[key] = " "\n        game()\n""")
sample;python tic tac toe
sample;exec("""\ndef main():\n    print("")\n    print("This is the numerical value for each section:")\n    print("")\n    print('1' + ' |' + ' 2 ' + '| ' + '3')\n    print('--+---+--')\n    print('4' + ' |' + ' 5 ' + '| ' + '6')\n    print('--+---+--')\n    print('7' + ' |' + ' 8 ' + '| ' + '9')\n    print("________________________")\n    theBoard = {'7': ' ' , '8': ' ' , '9': ' ' ,\n                '4': ' ' , '5': ' ' , '6': ' ' ,\n                '1': ' ' , '2': ' ' , '3': ' ' }\n    board_keys = []\n    for key in theBoard:\n        board_keys.append(key)\n    print("")\n    def printBoard(board):\n        print(board['1'] + ' |' + board['2'] + '  |' + board['3'])\n        print('--+---+--')\n        print(board['4'] + ' |' + board['5'] + '  |' + board['6'])\n        print('--+---+--')\n        print(board['7'] + ' |' + board['8'] + '  |' + board['9'])\n    def game():\n        turn = 'X'\n        count = 0\n        for i in range(10):\n            printBoard(theBoard)\n            print("")\n            print("It's " + turn + "'s turn. Move to which place?")\n            print("")\n            move = input()\n            print("")     \n            if theBoard[move] == ' ':\n                theBoard[move] = turn\n                count += 1\n            else:\n                print("That place is already filled.\\nMove to which place?")\n                continue\n            if count >= 5:\n                if theBoard['7'] == theBoard['8'] == theBoard['9'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")                \n                    break\n                elif theBoard['4'] == theBoard['5'] == theBoard['6'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['2'] == theBoard['3'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['4'] == theBoard['7'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['2'] == theBoard['5'] == theBoard['8'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['3'] == theBoard['6'] == theBoard['9'] != ' ': # \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n                elif theBoard['7'] == theBoard['5'] == theBoard['3'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['5'] == theBoard['9'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n            \n            if turn =='X':\n                turn = 'O'\n            else:\n                turn = 'X'\n        if count==9:\n          print("\\nGame Over.\\n")                \n          print("It's a Tie!!")   \n          print("")\n    game()\n    restart = input("\\nDo want to play Again(yes/no)? \\n")\n    if restart == "yes" or restart == "Yes":  \n      for key in board_keys:\n        theBoard[key] = " "\n        game()\n""")
sample;tic tac toe game
sample;exec("""\ndef main():\n    print("")\n    print("This is the numerical value for each section:")\n    print("")\n    print('1' + ' |' + ' 2 ' + '| ' + '3')\n    print('--+---+--')\n    print('4' + ' |' + ' 5 ' + '| ' + '6')\n    print('--+---+--')\n    print('7' + ' |' + ' 8 ' + '| ' + '9')\n    print("________________________")\n    theBoard = {'7': ' ' , '8': ' ' , '9': ' ' ,\n                '4': ' ' , '5': ' ' , '6': ' ' ,\n                '1': ' ' , '2': ' ' , '3': ' ' }\n    board_keys = []\n    for key in theBoard:\n        board_keys.append(key)\n    print("")\n    def printBoard(board):\n        print(board['1'] + ' |' + board['2'] + '  |' + board['3'])\n        print('--+---+--')\n        print(board['4'] + ' |' + board['5'] + '  |' + board['6'])\n        print('--+---+--')\n        print(board['7'] + ' |' + board['8'] + '  |' + board['9'])\n    def game():\n        turn = 'X'\n        count = 0\n        for i in range(10):\n            printBoard(theBoard)\n            print("")\n            print("It's " + turn + "'s turn. Move to which place?")\n            print("")\n            move = input()\n            print("")     \n            if theBoard[move] == ' ':\n                theBoard[move] = turn\n                count += 1\n            else:\n                print("That place is already filled.\\nMove to which place?")\n                continue\n            if count >= 5:\n                if theBoard['7'] == theBoard['8'] == theBoard['9'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")                \n                    break\n                elif theBoard['4'] == theBoard['5'] == theBoard['6'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['2'] == theBoard['3'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['4'] == theBoard['7'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['2'] == theBoard['5'] == theBoard['8'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['3'] == theBoard['6'] == theBoard['9'] != ' ': # \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n                elif theBoard['7'] == theBoard['5'] == theBoard['3'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['5'] == theBoard['9'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n            \n            if turn =='X':\n                turn = 'O'\n            else:\n                turn = 'X'\n        if count==9:\n          print("\\nGame Over.\\n")                \n          print("It's a Tie!!")   \n          print("")\n    game()\n    restart = input("\\nDo want to play Again(yes/no)? \\n")\n    if restart == "yes" or restart == "Yes":  \n      for key in board_keys:\n        theBoard[key] = " "\n        game()\n""")
sample;tic tac toe game python
sample;exec("""\ndef main():\n    print("")\n    print("This is the numerical value for each section:")\n    print("")\n    print('1' + ' |' + ' 2 ' + '| ' + '3')\n    print('--+---+--')\n    print('4' + ' |' + ' 5 ' + '| ' + '6')\n    print('--+---+--')\n    print('7' + ' |' + ' 8 ' + '| ' + '9')\n    print("________________________")\n    theBoard = {'7': ' ' , '8': ' ' , '9': ' ' ,\n                '4': ' ' , '5': ' ' , '6': ' ' ,\n                '1': ' ' , '2': ' ' , '3': ' ' }\n    board_keys = []\n    for key in theBoard:\n        board_keys.append(key)\n    print("")\n    def printBoard(board):\n        print(board['1'] + ' |' + board['2'] + '  |' + board['3'])\n        print('--+---+--')\n        print(board['4'] + ' |' + board['5'] + '  |' + board['6'])\n        print('--+---+--')\n        print(board['7'] + ' |' + board['8'] + '  |' + board['9'])\n    def game():\n        turn = 'X'\n        count = 0\n        for i in range(10):\n            printBoard(theBoard)\n            print("")\n            print("It's " + turn + "'s turn. Move to which place?")\n            print("")\n            move = input()\n            print("")     \n            if theBoard[move] == ' ':\n                theBoard[move] = turn\n                count += 1\n            else:\n                print("That place is already filled.\\nMove to which place?")\n                continue\n            if count >= 5:\n                if theBoard['7'] == theBoard['8'] == theBoard['9'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")                \n                    break\n                elif theBoard['4'] == theBoard['5'] == theBoard['6'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['2'] == theBoard['3'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['4'] == theBoard['7'] != ' ': \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['2'] == theBoard['5'] == theBoard['8'] != ' ':\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['3'] == theBoard['6'] == theBoard['9'] != ' ': # \n\n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n                elif theBoard['7'] == theBoard['5'] == theBoard['3'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break\n                elif theBoard['1'] == theBoard['5'] == theBoard['9'] != ' ': \n                    printBoard(theBoard)\n                    print("\\nGame Over.\\n")                \n                    print(turn + " won")\n                    break \n            \n            if turn =='X':\n                turn = 'O'\n            else:\n                turn = 'X'\n        if count==9:\n          print("\\nGame Over.\\n")                \n          print("It's a Tie!!")   \n          print("")\n    game()\n    restart = input("\\nDo want to play Again(yes/no)? \\n")\n    if restart == "yes" or restart == "Yes":  \n      for key in board_keys:\n        theBoard[key] = " "\n        game()\n""")
